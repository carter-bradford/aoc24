/*
 * This source file was generated by the Gradle 'init' task
 */
package com.locksmith

class Locksmith {
    val locks : List<List<Int>> = mutableListOf()
    val keys : List<List<Int>> = mutableListOf()

    fun load_input(filename: String): Pair<List<List<Int>>, List<List<Int>>> {
        val locks = mutableListOf<List<Int>>()
        val keys = mutableListOf<List<Int>>()
        val lines = java.io.File(filename).readLines()

        var i = 0
        while (i < lines.size) {
            when {
                lines[i] == "#####" -> {
                    val lock = MutableList(5) { 0 }
                    for (j in 1..5) {
                        for (k in 0..4) {
                            if (lines[i + j][k] == '#') lock[k]++
                        }
                    }
                    locks.add(lock)
                    i += 7
                }
                lines[i] == "....." -> {
                    val key = MutableList(5) { 0 }
                    for (j in 1..5) {
                        for (k in 0..4) {
                            if (lines[i + j][k] == '#') key[k]++
                        }
                    }
                    keys.add(key)
                    i += 7
                }
                else -> i++
            }
        }
        return Pair(locks, keys)
    }
}

fun main() {
    val app = Locksmith()
    val (locks, keys) = app.load_input("lock_schematic.txt")
    // Lazy early xmas morning --  brute force this one w/o thinking hard
    var counter = 0
    for (lock in locks) {
        for(key in keys) {
            val combined = lock.zip(key) { l, k -> l + k }
            if (combined.all { it <= 5 }) {
                counter++
            }
        }
    }
    println(counter)
}
